/*
 * opencog/tests/miner/SurprisingnessUTest.cxxtest
 *
 * Copyright (C) 2019 by SingularityNET Foundation
 * All Rights Reserved
 *
 * Written by Nil Geisweiller
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License v3 as
 * published by the Free Software Foundation and including the exceptions
 * at http://opencog.org/wiki/Licenses
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program; if not, write to:
 * Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 */

#include <cxxtest/TestSuite.h>

#include <boost/range/algorithm_ext/iota.hpp>

#include <opencog/util/random.h>

#include <opencog/miner/Surprisingness.h>
#include <opencog/atoms/base/Handle.h>
#include <opencog/atoms/execution/Instantiator.h>
#include <opencog/atoms/truthvalue/SimpleTruthValue.h>
#include <opencog/ure/backwardchainer/BackwardChainer.h>
#include <opencog/ure/URELogger.h>
#include <opencog/guile/SchemeEval.h>

#include "MinerUTestUtils.h"

using namespace opencog;
using namespace std;

#define al _as.add_link
#define an _as.add_node

class SurprisingnessUTest : public CxxTest::TestSuite
{
private:
	AtomSpacePtr _asp;
	AtomSpace& _as;
	SchemeEval _scm;

	// Surprisingness rule base
	Handle _surp_rb;

	// Concept holding the db, the database to mine.
	Handle _db_cpt;

	// Variables
	Handle X, Y, Z, W;

	// Some constants
	Handle C0, C1;
	
	HandleSeq ure_surp(const std::string& mode,
	                   unsigned max_conjuncts,
	                   double db_ratio=1.0);

	// Load the ugly male soda drinker corpus and associate all
	// inheritance links to _db_cpt.
	void load_ugly_male_soda_drinker_corpus();

	// Populate the atomspace with n_cpts concept nodes
	HandleSeq populate_concepts(unsigned n_cpts);

	// Populate Inheritance between n_cpts concept nodes with a
	// probability ip to have an inheritance between 2 concept nodes,
	// and associate all created atoms to _db_cpt. The semantics of
	// Inheritance is not taken into account.
	void populate_uniform_inheritance_links(unsigned n_cpts, double ip);

	// Generate ternary Lists of concepts among n_cpts
	void populate_uniform_ternary_list_links(unsigned n_cpts, double ip);

public:
	SurprisingnessUTest();
	~SurprisingnessUTest();

	void setUp();
	void tearDown();

	// Test auxilary methods
	void test_is_strictly_more_abstract();
	void test_subsmp();
	void test_emp_prob_bs_1();
	void test_emp_prob_bs_2();
	void test_avrg_tv_1();
	void test_avrg_tv_2();
	void test_avrg_tv_3();
	void test_jsd_1();
	void test_jsd_2();
	void test_jsd_3();

	// Test old nisurp surprisingness measures
	void test_nisurp_old_ugly_man();
	void test_nisurp_old_ugly_man_soda_drinker();

	// Test nisurp surprisingness without joint variables on synthetic data
	void test_nisurp_no_linkage_synthetic_1();
	void test_nisurp_no_linkage_synthetic_2();

	// Test surprisingness with joint variables on synthetic data
	void test_nisurp_linkage_synthetic_1();
	void test_nisurp_linkage_synthetic_2();
	void test_nisurp_linkage_synthetic_3();
	void test_nisurp_linkage_synthetic_4();
	void test_nisurp_linkage_synthetic_5();
	void test_nisurp_linkage_synthetic_6();
	void test_nisurp_linkage_synthetic_7();
	void test_nisurp_linkage_synthetic_8();

	// Make sure that the db-ratio doesn't degrade too much the
	// accuracy of the surprisingness measure
	void test_nisurp_linkage_synthetic_db_ratio();

	// Test surprisingness using bootstrapping to calculate
	// probabilities
	void test_nisurp_emp_prob_bs_1();

	// Test surprisingness on toy datasets
	void test_nisurp_ugly_man_soda_drinker();

	// Test jsdsurp surprisingness without joint variables on synthetic data
	void test_jsdsurp_no_linkage_synthetic();

	// Test jsdsurp surprisingness on ugly max soda drinker
	void test_jsdsurp_ugly_man_soda_drinker();
};

HandleSeq SurprisingnessUTest::ure_surp(const std::string& mode,
                                        unsigned max_conjuncts,
                                        double db_ratio)
{
	return MinerUTestUtils::ure_surp(_as, _scm, _surp_rb, mode,
	                                 max_conjuncts, db_ratio);
}

void SurprisingnessUTest::load_ugly_male_soda_drinker_corpus()
{
	std::string rs =
		_scm.eval("(load-from-path \"ugly-male-soda-drinker-corpus.scm\")");
	logger().debug() << "rs = " << rs;
	HandleSeq db;
	_as.get_handles_by_type(db, opencog::INHERITANCE_LINK, true);
	for (const Handle& dt : db)
		al(MEMBER_LINK, dt, _db_cpt);
}

HandleSeq SurprisingnessUTest::populate_concepts(unsigned n_cpts)
{
	// Create concepts Ci for i in [0, n_cpts)
	HandleSeq cpts(n_cpts);
	for (unsigned i = 0; i < n_cpts; i++) {
		cpts[i] = an(CONCEPT_NODE, std::string("C") + std::to_string(i));
		al(MEMBER_LINK, cpts[i], _db_cpt);
	}
	return cpts;
}

void SurprisingnessUTest::populate_uniform_inheritance_links(unsigned n_cpts,
                                                             double ip)
{
	// Create concepts Ci for i in [0, n_cpts)
	HandleSeq cpts = populate_concepts(n_cpts);

	// For any Ci Cj pair create a Inheritance Link between them with
	// probability ip and add it to the data base.
	for (const Handle& Ci : cpts) {
		for (const Handle& Cj : cpts) {
			if (biased_randbool(ip)) {
				Handle InhCiCj = al(INHERITANCE_LINK, Ci, Cj);
				al(MEMBER_LINK, InhCiCj, _db_cpt);
			}
		}
	}

	// logger().debug() << "AtomSpace:" << std::endl << _as;
}

void SurprisingnessUTest::populate_uniform_ternary_list_links(unsigned n_cpts,
                                                              double ip)
{
	// Create concepts Ci for i in [0, n_cpts)
	HandleSeq cpts = populate_concepts(n_cpts);

	// For any Ci Cj Ck triple create a List Link between them with
	// probability ip and add it to the data base.
	for (const Handle& Ci : cpts) {
		for (const Handle& Cj : cpts) {
			for (const Handle& Ck : cpts) {
				if (biased_randbool(ip)) {
					Handle ListCiCjCk = al(LIST_LINK, Ci, Cj, Ck);
					al(MEMBER_LINK, ListCiCjCk, _db_cpt);
				}
			}
		}
	}

	// logger().debug() << "AtomSpace:" << std::endl << _as;
}

SurprisingnessUTest::SurprisingnessUTest() :
	_asp(createAtomSpace()), _as(*_asp.get()), _scm(_asp)
{
	randGen().seed(0);

	// Main logger
	logger().set_level(Logger::INFO);
	logger().set_timestamp_flag(false);
	logger().set_sync_flag(true);
	logger().set_print_to_stdout_flag(true);

	// URE logger
	ure_logger().set_level(Logger::INFO);
	ure_logger().set_timestamp_flag(false);
	ure_logger().set_sync_flag(true);
	ure_logger().set_print_to_stdout_flag(true);

	// Configure scheme load-paths that are common for all tests.
	_scm.eval("(add-to-load-path \"" PROJECT_SOURCE_DIR
	          "/tests/miner/scm\")");

	// Load modules
	_scm.eval("(use-modules (opencog))");
	std::string rs = _scm.eval("(use-modules (opencog miner))");
	logger().debug() << "MinerUTest() rs = " << rs;
}

SurprisingnessUTest::~SurprisingnessUTest() {}

void SurprisingnessUTest::setUp()
{
	_db_cpt = an(CONCEPT_NODE, "db");
	_surp_rb = an(CONCEPT_NODE, "surp_rb");
	X = an(VARIABLE_NODE, "$X");
	Y = an(VARIABLE_NODE, "$Y");
	Z = an(VARIABLE_NODE, "$Z");
	W = an(VARIABLE_NODE, "$W");
	C0 = an(CONCEPT_NODE, "C0");
	C1 = an(CONCEPT_NODE, "C1");
}

void SurprisingnessUTest::tearDown()
{
	_as.clear();
}

void SurprisingnessUTest::test_is_strictly_more_abstract()
{
	logger().info("BEGIN TEST: %s", __FUNCTION__);

	HandleSeq l_blk{al(LIST_LINK, X, Y, Z)};
	HandleSeq r_blk{al(LIST_LINK, W, C0, Z)};

	// Left block/subpattern is strictly more abstract than right
	// block/subpattern, relative to Z.
	TS_ASSERT(Surprisingness::is_strictly_more_abstract(l_blk, r_blk, Z));

	// Left block/subpattern is not more abstract than right
	// block/subpattern, relative to X.
	TS_ASSERT(not Surprisingness::is_strictly_more_abstract(l_blk, r_blk, X));

	// Left block/subpattern is not more abstract than itself relative
	// to Z, since it is equivalent.
	TS_ASSERT(not Surprisingness::is_strictly_more_abstract(l_blk, l_blk, Z));
}

void SurprisingnessUTest::test_subsmp()
{
	logger().info("BEGIN TEST: %s", __FUNCTION__);

	// Create data base
	populate_uniform_inheritance_links(4000, 0.1);
	HandleSeq db = MinerUtils::get_db(_db_cpt);
	logger().debug() << "db.size() = " << db.size();

	// Subsample db
	HandleSeq db_smp_1 = Surprisingness::subsmp(db, 1000);
	logger().debug() << "db_smp_1.size() = " << db_smp_1.size();
	TS_ASSERT_EQUALS(db_smp_1.size(), 1000);

	HandleSeq db_smp_2 = Surprisingness::subsmp(db, 10000);
	logger().debug() << "db_smp_2.size() = " << db_smp_2.size();
	TS_ASSERT_EQUALS(db_smp_2.size(), 10000);

	HandleSeq db_smp_3 = Surprisingness::subsmp(db, 100000);
	logger().debug() << "db_smp_3.size() = " << db_smp_3.size();
	TS_ASSERT_EQUALS(db_smp_3.size(), 100000);

	HandleSeq db_smp_4 = Surprisingness::subsmp(db, 1000000);
	logger().debug() << "db_smp_4.size() = " << db_smp_4.size();
	TS_ASSERT_EQUALS(db_smp_4.size(), 1000000);

	HandleSeq db_smp_5 = Surprisingness::subsmp(db, 10000000);
	logger().debug() << "db_smp_5.size() = " << db_smp_5.size();
	TS_ASSERT_EQUALS(db_smp_5.size(), db.size());
}

void SurprisingnessUTest::test_emp_prob_bs_1()
{
	logger().info("BEGIN TEST: %s", __FUNCTION__);

	// Create data base
	populate_uniform_inheritance_links(1000, 0.01);

	// Create pattern to measure empiric probability with and without
	// boostrapping
	//
	// LambdaLink
	//   X Y
	//   InheritanceLink
	//     X
	//     Y
	Handle pattern = al(LAMBDA_LINK,
	                    al(VARIABLE_SET, X, Y),
	                    al(INHERITANCE_LINK, X, Y));

	HandleSeq db = MinerUtils::get_db(_db_cpt);
	double epr = Surprisingness::emp_prob(pattern, db);
	double epr_bs = Surprisingness::emp_prob_bs(pattern, db, 10, 1000);
	logger().debug() << "db.size() = " << db.size()
	                << ", epr = " << epr
	                << ", epr_bs = " << epr_bs;
	TS_ASSERT_DELTA(epr, epr_bs, 0.1);
}

void SurprisingnessUTest::test_emp_prob_bs_2()
{
	logger().info("BEGIN TEST: %s", __FUNCTION__);

	// Create data base
	populate_uniform_inheritance_links(1000, 0.001068);

	// Create pattern to measure empiric probability with and without
	// boostrapping
	//
	// LambdaLink
	//   X Y Z
	//   PresentLink
	//     InheritanceLink
	//       X
	//       Y
	//     InheritanceLink
	//       Z
	//       Y
	Handle pattern = al(LAMBDA_LINK,
	                    al(VARIABLE_SET, X, Y, Z),
	                    al(PRESENT_LINK,
	                       al(INHERITANCE_LINK, X, Y),
	                       al(INHERITANCE_LINK, Y, Z)));

	HandleSeq db = MinerUtils::get_db(_db_cpt);
	double epr = Surprisingness::emp_prob(pattern, db);
	double epr_bs = Surprisingness::emp_prob_bs(pattern, db, 100, 1500);
	logger().debug() << "db.size() = " << db.size()
	                 << ", epr = " << epr
	                 << ", epr_bs = " << epr_bs;
	TS_ASSERT_DELTA(epr, epr_bs, 0.001);
}

void SurprisingnessUTest::test_avrg_tv_1()
{
	logger().info("BEGIN TEST: %s", __FUNCTION__);

	TruthValuePtr
		tv1 = createSimpleTruthValue(0, 0.1),
		tv2 = createSimpleTruthValue(0, 0.1),
		result = Surprisingness::avrg_tv({tv1, tv2}),
		expect = createSimpleTruthValue(0, 0.1);

	logger().debug() << "result = " << oc_to_string(result);
	logger().debug() << "expect = " << oc_to_string(expect);

	TS_ASSERT_DELTA(result->get_mean(), expect->get_mean(), 1e-3);
}

void SurprisingnessUTest::test_avrg_tv_2()
{
	logger().info("BEGIN TEST: %s", __FUNCTION__);

	TruthValuePtr
		tv1 = createSimpleTruthValue(0, 0.1),
		tv2 = createSimpleTruthValue(1, 0.1),
		result = Surprisingness::avrg_tv({tv1, tv2}),
		expect = createSimpleTruthValue(0.5, 0.000125);

	logger().debug() << "result = " << oc_to_string(result);
	logger().debug() << "expect = " << oc_to_string(expect);

	TS_ASSERT_DELTA(result->get_mean(), expect->get_mean(), 1e-3);
}

void SurprisingnessUTest::test_avrg_tv_3()
{
	logger().info("BEGIN TEST: %s", __FUNCTION__);

	TruthValuePtr
		tv0 = createSimpleTruthValue(1, 0.001248),
		tv1 = createSimpleTruthValue(1, 0.001248),
		tv2 = createSimpleTruthValue(0, 0.001248),
		tv3 = createSimpleTruthValue(1, 0.001248),
		tv4 = createSimpleTruthValue(1, 0.001248),
		tv5 = createSimpleTruthValue(1, 0.001248),
		tv6 = createSimpleTruthValue(1, 0.001248),
		tv7 = createSimpleTruthValue(1, 0.001248),
		tv8 = createSimpleTruthValue(1, 0.001248),
		tv9 = createSimpleTruthValue(1, 0.001248),
		result = Surprisingness::avrg_tv({tv0, tv1, tv2, tv3, tv4,
		                                  tv5, tv6, tv7, tv8, tv9}),
		// Weirdly enough the result is 1 for the mode, which might
		// actually be correct, would need to carefully check the math.
		expect = createSimpleTruthValue(1, 0.000677);

	logger().debug() << "result = " << oc_to_string(result);
	logger().debug() << "expect = " << oc_to_string(expect);

	TS_ASSERT_DELTA(result->get_mean(), expect->get_mean(), 1e-3);
}

// Test Jensen-Shannon Distance over 2 truth values with low
// confidence, even when their strength is different their JSD
// shouldn't be high.
void SurprisingnessUTest::test_jsd_1()
{
	logger().info("BEGIN TEST: %s", __FUNCTION__);

	count_t
		x1 = 1, n1 = 3,
		x2 = 4, n2 = 6;
	TruthValuePtr
		tv1 = createSimpleTruthValue(x1 / n1, Surprisingness::count_to_confidence(n1)),
		tv2 = createSimpleTruthValue(x2 / n2, Surprisingness::count_to_confidence(n2));
	double
		result = Surprisingness::jsd(tv1, tv2),
		expect = 0.484582;        // Based on 10K bins

	logger().debug() << "result = " << result;
	logger().debug() << "expect = " << expect;

	TS_ASSERT_DELTA(result, expect, 0.1);
}

// Test Jensen-Shannon Distance over 2 truth values with high
// confidence but similar strength, thus their JSD shouldn't be high.
void SurprisingnessUTest::test_jsd_2()
{
	logger().info("BEGIN TEST: %s", __FUNCTION__);

	count_t
		x1 = 800, n1 = 1000,
		x2 = 800, n2 = 1004;
	TruthValuePtr
		tv1 = createSimpleTruthValue(x1 / n1, Surprisingness::count_to_confidence(n1)),
		tv2 = createSimpleTruthValue(x2 / n2, Surprisingness::count_to_confidence(n2));
	double
		result = Surprisingness::jsd(tv1, tv2),
		expect = 0.106229;             // Based on 10K bins

	logger().debug() << "result = " << result;
	logger().debug() << "expect = " << expect;

	TS_ASSERT_DELTA(result, expect, 0.1);
}

// Test Jensen-Shannon Distance over 2 truth values with high
// confidence and dissimilar strength, thus their JSD should be high.
void SurprisingnessUTest::test_jsd_3()
{
	logger().info("BEGIN TEST: %s", __FUNCTION__);

	count_t
		x1 = 80, n1 = 100,
		x2 = 100, n2 = 1000;
	TruthValuePtr
		tv1 = createSimpleTruthValue(x1 / n1, Surprisingness::count_to_confidence(n1)),
		tv2 = createSimpleTruthValue(x2 / n2, Surprisingness::count_to_confidence(n2));
	double
		result = Surprisingness::jsd(tv1, tv2),
		expect = 1.0;

	logger().debug() << "result = " << result;
	logger().debug() << "expect = " << expect;

	TS_ASSERT_DELTA(result, expect, 0.1);
}

// Test old normalized I-Surprisingess for the ugly male
void SurprisingnessUTest::test_nisurp_old_ugly_man()
{
	logger().info("BEGIN TEST: %s", __FUNCTION__);

	// Define db
	load_ugly_male_soda_drinker_corpus();

	// Add
	//
	// Lambda
	//   X
	//   Present
	//     Inheritance
	//       X
	//       Concept "man"
	//     Inheritance
	//       X
	//       Concept "soda drinker"
	//     Inheritance
	//       X
	//       Concept "ugly"
	//
	// and its conjuncts.
	Handle ugly_pattern = MinerUTestUtils::add_ugly_pattern(_as),
		man_pattern = MinerUTestUtils::add_man_pattern(_as),
		ugly_man_pattern = MinerUTestUtils::add_ugly_man_pattern(_as);

	// Wrap pattern and its conjuncts in minsup predicates
	int ms = 5;
	MinerUTestUtils::add_minsup_eval(_as, ugly_pattern, ms, TruthValue::TRUE_TV());
	MinerUTestUtils::add_minsup_eval(_as, man_pattern, ms, TruthValue::TRUE_TV());
	MinerUTestUtils::add_minsup_eval(_as, ugly_man_pattern, ms, TruthValue::TRUE_TV());

	// Test I-Surprisingness
	std::string mode = "nisurp-old";
	unsigned max_conjuncts = 2;
	HandleSeq surp_results = ure_surp(mode, max_conjuncts);
	Handle expected = MinerUTestUtils::add_surp_eval(_as, mode, ugly_man_pattern);

	logger().debug() << "surp_results = " << oc_to_string(surp_results);

	TS_ASSERT(not surp_results.empty());

	Handle surp_front = surp_results.front();

	logger().debug() << "expected = " << oc_to_string(expected);
	logger().debug() << "surp_front = " << oc_to_string(surp_front);

	TS_ASSERT(content_eq(expected, surp_front));
}

// Test old normalized I-Surprisingess for the ugly male soda drinker
void SurprisingnessUTest::test_nisurp_old_ugly_man_soda_drinker()
{
	logger().info("BEGIN TEST: %s", __FUNCTION__);

	// Define db
	load_ugly_male_soda_drinker_corpus();

	// Add
	//
	// Lambda
	//   X
	//   Present
	//     Inheritance
	//       X
	//       Concept "man"
	//     Inheritance
	//       X
	//       Concept "soda drinker"
	//     Inheritance
	//       X
	//       Concept "ugly"
	//
	// and its conjuncts.
	Handle ugly_pattern = MinerUTestUtils::add_ugly_pattern(_as),
		man_pattern = MinerUTestUtils::add_man_pattern(_as),
		soda_drinker_pattern = MinerUTestUtils::add_soda_drinker_pattern(_as),
		umsd_pattern = MinerUTestUtils::add_ugly_man_soda_drinker_pattern(_as);

	// Wrap pattern and its conjuncts in minsup predicates
	int ms = 5;
	MinerUTestUtils::add_minsup_eval(_as, ugly_pattern, ms, TruthValue::TRUE_TV());
	MinerUTestUtils::add_minsup_eval(_as, man_pattern, ms, TruthValue::TRUE_TV());
	MinerUTestUtils::add_minsup_eval(_as, soda_drinker_pattern, ms, TruthValue::TRUE_TV());
	MinerUTestUtils::add_minsup_eval(_as, umsd_pattern, ms, TruthValue::TRUE_TV());

	// Test I-Surprisingness
	std::string mode = "nisurp-old";
	unsigned max_conjuncts = 3;
	HandleSeq surp_results = ure_surp(mode, max_conjuncts);
	Handle expected = MinerUTestUtils::add_surp_eval(_as, mode, umsd_pattern);

	logger().debug() << "surp_results = " << oc_to_string(surp_results);

	TS_ASSERT(not surp_results.empty());

	Handle surp_front = surp_results.front();

	logger().debug() << "expected = " << oc_to_string(expected);
	logger().debug() << "surp_front = " << oc_to_string(surp_front);

	TS_ASSERT(content_eq(expected, surp_front));
	TS_ASSERT_DELTA(0.9997, TruthValueCast(expected->getValue(truth_key()))->get_mean(), 1e-4);
}

// Test normalized I-Surprisingess for an artificially generated data
// set where there are no dependency.
//
// The data set is composed of
//
// Inheritance
//   Concept "Ci"
//   Concept "Cj"
//
// The semantics of Inheritance (the fact that it is for instance
// transitive) is completely ignored.
//
// The nisurp is calculated over pattern
//
// Lambda
//   X Y Z W
//   Present
//     Inheritance
//       X
//       Y
//     Inheritance
//       Z
//       W
void SurprisingnessUTest::test_nisurp_no_linkage_synthetic_1()
{
	logger().info("BEGIN TEST: %s", __FUNCTION__);

	// Create data base
	populate_uniform_inheritance_links(1000, 0.01);

	// Create pattern to measure surprisingness of
	//
	// Lambda
	//   X Y Z W
	//   Present
	//     Inheritance X Y
	//     Inheritance Z W
	Handle pattern = al(LAMBDA_LINK,
	                    al(VARIABLE_SET, X, Y, Z, W),
	                    al(PRESENT_LINK,
	                       al(INHERITANCE_LINK, X, Y),
	                       al(INHERITANCE_LINK, Z, W)));
	MinerUTestUtils::add_minsup_eval(_as, pattern, 5, TruthValue::TRUE_TV());

	// Test normalized I-Surprisingness
	std::string mode = "nisurp";
	HandleSeq surp_results = ure_surp(mode, 2);
	Handle expected = MinerUTestUtils::add_surp_eval(_as, mode, pattern);

	logger().debug() << "surp_results = " << oc_to_string(surp_results);

	TS_ASSERT(not surp_results.empty());

	Handle surp_front = surp_results.front();

	logger().debug() << "expected = " << oc_to_string(expected);
	logger().debug() << "surp_front = " << oc_to_string(surp_front);

	TS_ASSERT(content_eq(expected, surp_front));

	// Since the pattern is composed of 2 independent patterns, it
	// should be completely unsurprising, thus have a nearly null
	// nisurp measure, however bootstrapping introduces inaccuracies
	// thus the last delta.
	TS_ASSERT_DELTA(0.0, TruthValueCast(expected->getValue(truth_key()))->get_mean(), 0.3);
}

// Similar to above for pattern
//
// Lambda
//   X Y
//   Present
//     Inheritance
//       X
//       C0
//     Inheritance
//       Y
//       C1
void SurprisingnessUTest::test_nisurp_no_linkage_synthetic_2()
{
	logger().info("BEGIN TEST: %s", __FUNCTION__);

	// Create data base
	populate_uniform_inheritance_links(1000, 0.5);

	// Create pattern to measure surprisingness of
	//
	// Lambda
	//   X Y
	//   Present
	//     Inheritance X C0
	//     Inheritance Y C1
	Handle pattern = al(LAMBDA_LINK,
	                    al(VARIABLE_SET, X, Y),
	                    al(PRESENT_LINK,
	                       al(INHERITANCE_LINK, X, C0),
	                       al(INHERITANCE_LINK, Y, C1)));
	MinerUTestUtils::add_minsup_eval(_as, pattern, 5, TruthValue::TRUE_TV());

	// Test normalized I-Surprisingness
	std::string mode = "nisurp";
	HandleSeq surp_results = ure_surp(mode, 2);
	Handle expected = MinerUTestUtils::add_surp_eval(_as, mode, pattern);

	logger().debug() << "surp_results = " << oc_to_string(surp_results);

	TS_ASSERT(not surp_results.empty());

	Handle surp_front = surp_results.front();

	// logger().debug() << "expected = " << oc_to_string(expected);
	// logger().debug() << "surp_front = " << oc_to_string(surp_front);

	TS_ASSERT(content_eq(expected, surp_front));

	// Since the pattern is composed of 2 independent patterns, it
	// should be completely unsurprising, thus have a nearly null
	// nisurp measure.
	TS_ASSERT_DELTA(0.0, TruthValueCast(expected->getValue(truth_key()))->get_mean(), 1e-9);
}

// Similar to above but the pattern contains a linkage
//
// Lambda
//   X
//   Present
//     Inheritance
//       X
//       C0
//     Inheritance
//       X
//       C1
//
// Since the data set is generated with independent assumptions, it
// should not be surprising either (if linkage is properly taken into
// account).
//
	// TODO: that one is really difficult to get because it ultimately
	// depends on data generator to determine the universe of possible
	// values of each variable, which is hard to guess.
void SurprisingnessUTest::test_nisurp_linkage_synthetic_1()
{
	logger().info("BEGIN TEST: %s", __FUNCTION__);

	// Create data base
	populate_uniform_inheritance_links(3, 0.8);

	// Create pattern to measure surprisingness of
	//
	// Lambda
	//   X
	//   Present
	//     Inheritance X C0
	//     Inheritance X C1
	Handle pattern = al(LAMBDA_LINK,
	                    X,
	                    al(PRESENT_LINK,
	                       al(INHERITANCE_LINK, X, C0),
	                       al(INHERITANCE_LINK, X, C1)));
	MinerUTestUtils::add_minsup_eval(_as, pattern, 5, TruthValue::TRUE_TV());

	// Test normalized I-Surprisingness
	std::string mode = "nisurp";
	HandleSeq surp_results = ure_surp(mode, 2);
	Handle expected = MinerUTestUtils::add_surp_eval(_as, mode, pattern);

	logger().debug() << "surp_results = " << oc_to_string(surp_results);

	TS_ASSERT(not surp_results.empty());

	Handle surp_front = surp_results.front();

	// logger().debug() << "expected = " << oc_to_string(expected);
	// logger().debug() << "surp_front = " << oc_to_string(surp_front);

	TS_ASSERT(content_eq(expected, surp_front));

	TS_ASSERT_DELTA(0.0, TruthValueCast(expected->getValue(truth_key()))->get_mean(), 0.8);
}

// Similar to above for pattern
//
// Lambda
//   X Y Z
//   Present
//     Inheritance
//       X
//       Y
//     Inheritance
//       Y
//       Z
void SurprisingnessUTest::test_nisurp_linkage_synthetic_2()
{
	logger().info("BEGIN TEST: %s", __FUNCTION__);

	// Create data base
	populate_uniform_inheritance_links(10000, 0.00001);

	// Create pattern to measure surprisingness of
	//
	// Lambda
	//   X Y Z
	//   Present
	//     Inheritance X Y
	//     Inheritance Y Z
	Handle pattern = al(LAMBDA_LINK,
	                    al(VARIABLE_SET, X, Y, Z),
	                    al(PRESENT_LINK,
	                       al(INHERITANCE_LINK, X, Y),
	                       al(INHERITANCE_LINK, Y, Z)));
	MinerUTestUtils::add_minsup_eval(_as, pattern, 5, TruthValue::TRUE_TV());

	// Test normalized I-Surprisingness
	std::string mode = "nisurp";
	HandleSeq surp_results = ure_surp(mode, 2);
	Handle expected = MinerUTestUtils::add_surp_eval(_as, mode, pattern);

	logger().debug() << "surp_results = " << oc_to_string(surp_results);

	TS_ASSERT(not surp_results.empty());

	Handle surp_front = surp_results.front();

	logger().debug() << "expected = " << oc_to_string(expected);
	logger().debug() << "surp_front = " << oc_to_string(surp_front);

	TS_ASSERT(content_eq(expected, surp_front));

	TS_ASSERT_DELTA(0.0, TruthValueCast(expected->getValue(truth_key()))->get_mean(), 0.2);
}

// Similar to above for pattern
//
// LambdaLink
//   VariableSet
//     X
//     Y
//     Z
//   PresentLink
//     InheritanceLink
//       X
//       Y
//     InheritanceLink
//       Z
//       Y
//
// Note that here Y is not independently linked in the 2 clauses,
// basically the probability of a value of Y being equal in both
// clauses is much less that in test_nisurp_linkage_synthetic_2
// because the possible set of values for Y is the same in the 2
// clauses.
void SurprisingnessUTest::test_nisurp_linkage_synthetic_3()
{
	logger().info("BEGIN TEST: %s", __FUNCTION__);

	// Create data base
	populate_uniform_inheritance_links(1000, 0.01);

	// Create pattern to measure surprisingness of
	//
	// LambdaLink
	//   X Y Z
	//   PresentLink
	//     InheritanceLink
	//       X
	//       Y
	//     InheritanceLink
	//       Z
	//       Y
	Handle pattern = al(LAMBDA_LINK,
	                    al(VARIABLE_SET, X, Y, Z),
	                    al(PRESENT_LINK,
	                       al(INHERITANCE_LINK, X, Y),
	                       al(INHERITANCE_LINK, Z, Y)));
	MinerUTestUtils::add_minsup_eval(_as, pattern, 5, TruthValue::TRUE_TV());

	// Test normalized I-Surprisingness
	std::string mode = "nisurp";
	unsigned max_conjuncts = 2;
	double db_ratio = 2;
	HandleSeq surp_results = ure_surp(mode, max_conjuncts, db_ratio);
	Handle expected = MinerUTestUtils::add_surp_eval(_as, mode, pattern);

	logger().debug() << "surp_results = " << oc_to_string(surp_results);

	TS_ASSERT(not surp_results.empty());

	Handle surp_front = surp_results.front();

	logger().debug() << "expected = " << oc_to_string(expected);
	logger().debug() << "surp_front = " << oc_to_string(surp_front);

	TS_ASSERT(content_eq(expected, surp_front));

	TS_ASSERT_DELTA(0.0, TruthValueCast(expected->getValue(truth_key()))->get_mean(), 0.3);
}

// Similar to above for pattern
//
// LambdaLink
//   VariableSet
//     X
//     Y
//   PresentLink
//     InheritanceLink
//       X
//       Y
//     InheritanceLink
//       C0
//       Y
//
// Here the possible set of values for Y is the not the same for both
// closes, however in the second clauses it is a subset of the
// possible values of the first clause, so again not completely
// independent like in test_nisurp_linkage_synthetic_2
void SurprisingnessUTest::test_nisurp_linkage_synthetic_4()
{
	logger().info("BEGIN TEST: %s", __FUNCTION__);

	// Create data base
	populate_uniform_inheritance_links(1000, 0.1);

	// Create pattern to measure surprisingness of
	//
	// LambdaLink
	//   X Y
	//   PresentLink
	//     InheritanceLink
	//       X
	//       Y
	//     InheritanceLink
	//       C0
	//       Y
	Handle pattern = al(LAMBDA_LINK,
	                    al(VARIABLE_SET, X, Y),
	                    al(PRESENT_LINK,
	                       al(INHERITANCE_LINK, X, Y),
	                       al(INHERITANCE_LINK, C0, Y)));
	MinerUTestUtils::add_minsup_eval(_as, pattern, 5, TruthValue::TRUE_TV());

	// Test normalized I-Surprisingness
	std::string mode = "nisurp";
	HandleSeq surp_results = ure_surp(mode, 2);
	Handle expected = MinerUTestUtils::add_surp_eval(_as, mode, pattern);

	logger().debug() << "surp_results = " << oc_to_string(surp_results);

	TS_ASSERT(not surp_results.empty());

	Handle surp_front = surp_results.front();

	logger().debug() << "expected = " << oc_to_string(expected);
	logger().debug() << "surp_front = " << oc_to_string(surp_front);

	TS_ASSERT(content_eq(expected, surp_front));

	TS_ASSERT_DELTA(0.0, TruthValueCast(expected->getValue(truth_key()))->get_mean(), 1e-1);
}

// Similar to above for pattern
//
// LambdaLink
//   VariableSet
//     X
//     Y
//     Z
//   PresentLink
//     InheritanceLink
//       X
//       Y
//     InheritanceLink
//       Z
//       Y
//     InheritanceLink
//       W
//       Y
void SurprisingnessUTest::test_nisurp_linkage_synthetic_5()
{
	logger().info("BEGIN TEST: %s", __FUNCTION__);

	// Create data base
	populate_uniform_inheritance_links(1000, 0.01);

	// Create pattern to measure surprisingness of
	//
	// LambdaLink
	//   X Y Z W
	//   PresentLink
	//     InheritanceLink
	//       X
	//       Y
	//     InheritanceLink
	//       Z
	//       Y
	//     InheritanceLink
	//       W
	//       Y
	Handle pattern = al(LAMBDA_LINK,
	                    al(VARIABLE_SET, X, Y, Z, W),
	                    al(PRESENT_LINK,
	                       al(INHERITANCE_LINK, X, Y),
	                       al(INHERITANCE_LINK, Z, Y),
	                       al(INHERITANCE_LINK, W, Y)));
	MinerUTestUtils::add_minsup_eval(_as, pattern, 5, TruthValue::TRUE_TV());

	// Test normalized I-Surprisingness
	std::string mode = "nisurp";
	unsigned max_conjuncts = 3;
	double db_ratio = 3;
	HandleSeq surp_results = ure_surp(mode, max_conjuncts, db_ratio);
	Handle expected = MinerUTestUtils::add_surp_eval(_as, mode, pattern);

	logger().debug() << "surp_results = " << oc_to_string(surp_results);

	TS_ASSERT(not surp_results.empty());

	Handle surp_front = surp_results.front();

	logger().debug() << "expected = " << oc_to_string(expected);
	logger().debug() << "surp_front = " << oc_to_string(surp_front);

	TS_ASSERT(content_eq(expected, surp_front));

	TS_ASSERT_DELTA(0.0, TruthValueCast(expected->getValue(truth_key()))->get_mean(), 0.4);
}

// Similar to above for pattern
//
// LambdaLink
//   VariableSet
//     X
//     Y
//     Z
//   PresentLink
//     InheritanceLink
//       X
//       Y
//     InheritanceLink
//       Z
//       Y
//     InheritanceLink
//       X
//       C0
//     InheritanceLink
//       Z
//       C1
void SurprisingnessUTest::test_nisurp_linkage_synthetic_6()
{
	logger().info("BEGIN TEST: %s", __FUNCTION__);

	// Create data base
	populate_uniform_inheritance_links(1000, 0.05);

	// Create pattern to measure surprisingness of
	//
	// LambdaLink
	//   VariableSet
	//     X
	//     Y
	//     Z
	//   PresentLink
	//     InheritanceLink
	//       X
	//       Y
	//     InheritanceLink
	//       Z
	//       Y
	//     InheritanceLink
	//       X
	//       C0
	//     InheritanceLink
	//       Z
	//       C1
	Handle pattern = al(LAMBDA_LINK,
	                    al(VARIABLE_SET, X, Y, Z),
	                    al(PRESENT_LINK,
	                       al(INHERITANCE_LINK, X, Y),
	                       al(INHERITANCE_LINK, Z, Y),
	                       al(INHERITANCE_LINK, X, C0),
	                       al(INHERITANCE_LINK, Z, C1)));
	MinerUTestUtils::add_minsup_eval(_as, pattern, 5, TruthValue::TRUE_TV());

	// Test normalized I-Surprisingness
	std::string mode = "nisurp";
	unsigned max_conjuncts = 4;
	double db_ratio = 2;
	HandleSeq surp_results = ure_surp(mode, max_conjuncts, db_ratio);
	Handle expected = MinerUTestUtils::add_surp_eval(_as, mode, pattern);

	logger().debug() << "surp_results = " << oc_to_string(surp_results);

	TS_ASSERT(not surp_results.empty());

	Handle surp_front = surp_results.front();

	logger().debug() << "expected = " << oc_to_string(expected);
	logger().debug() << "surp_front = " << oc_to_string(surp_front);

	TS_ASSERT(content_eq(expected, surp_front));

	TS_ASSERT_DELTA(0.0, TruthValueCast(expected->getValue(truth_key()))->get_mean(), 0.5);
}

// Similar to above for pattern
//
// LambdaLink
//   VariableSet
//     X
//     Y
//     Z
//     W
//   PresentLink
//     List
//       X
//       Y
//       Z
//     List
//       W
//       Y
//       Z
void SurprisingnessUTest::test_nisurp_linkage_synthetic_7()
{
	logger().info("BEGIN TEST: %s", __FUNCTION__);

	// Create data base
	populate_uniform_ternary_list_links(50, 0.1);

	// Create pattern to measure surprisingness of
	//
	// LambdaLink
	//   X Y Z W
	//   PresentLink
	//     List
	//       X
	//       Y
	//       Z
	//     List
	//       W
	//       Y
	//       Z
	Handle pattern = al(LAMBDA_LINK,
	                    al(VARIABLE_SET, X, Y, Z, W),
	                    al(PRESENT_LINK,
	                       al(LIST_LINK, X, Y, Z),
	                       al(LIST_LINK, W, Y, Z)));
	MinerUTestUtils::add_minsup_eval(_as, pattern, 5, TruthValue::TRUE_TV());

	// Test normalized I-Surprisingness
	std::string mode = "nisurp";
	unsigned max_conjuncts = 2;
	double db_ratio = 2;
	HandleSeq surp_results = ure_surp(mode, max_conjuncts, db_ratio);
	Handle expected = MinerUTestUtils::add_surp_eval(_as, mode, pattern);

	logger().debug() << "surp_results = " << oc_to_string(surp_results);

	TS_ASSERT(not surp_results.empty());

	Handle surp_front = surp_results.front();

	logger().debug() << "expected = " << oc_to_string(expected);
	logger().debug() << "surp_front = " << oc_to_string(surp_front);

	TS_ASSERT(content_eq(expected, surp_front));

	TS_ASSERT_DELTA(0.0, TruthValueCast(expected->getValue(truth_key()))->get_mean(), 0.4);
}

// Similar to above for pattern
//
// LambdaLink
//   VariableSet
//     X
//     Y
//     Z
//     W
//   PresentLink
//     List
//       X
//       Y
//       X
//     List
//       Z
//       W
//       X
void SurprisingnessUTest::test_nisurp_linkage_synthetic_8()
{
	logger().info("BEGIN TEST: %s", __FUNCTION__);

	// Create data base
	populate_uniform_ternary_list_links(50, 0.1);

	// Create pattern to measure surprisingness of
	//
	// LambdaLink
	//   X Y Z W
	//   PresentLink
	//     List
	//       X
	//       Y
	//       X
	//     List
	//       Z
	//       W
	//       X
	Handle pattern = al(LAMBDA_LINK,
	                    al(VARIABLE_SET, X, Y, Z, W),
	                    al(PRESENT_LINK,
	                       al(LIST_LINK, X, Y, X),
	                       al(LIST_LINK, Z, W, X)));
	MinerUTestUtils::add_minsup_eval(_as, pattern, 5, TruthValue::TRUE_TV());

	// Test normalized I-Surprisingness
	std::string mode = "nisurp";
	HandleSeq surp_results = ure_surp(mode, 2);
	Handle expected = MinerUTestUtils::add_surp_eval(_as, mode, pattern);

	logger().debug() << "surp_results = " << oc_to_string(surp_results);

	TS_ASSERT(not surp_results.empty());

	Handle surp_front = surp_results.front();

	logger().debug() << "expected = " << oc_to_string(expected);
	logger().debug() << "surp_front = " << oc_to_string(surp_front);

	TS_ASSERT(content_eq(expected, surp_front));

	TS_ASSERT_DELTA(0.0, TruthValueCast(expected->getValue(truth_key()))->get_mean(), 0.3);
}

// Like test_nisurp_linkage_synthetic_8() but make sure that db-ratio
// doesn't degrade too much the accuracy of the surprisingness
// measure.
void SurprisingnessUTest::test_nisurp_linkage_synthetic_db_ratio()
{
	logger().info("BEGIN TEST: %s", __FUNCTION__);

	// Create data base
	populate_uniform_ternary_list_links(50, 0.1);

	// Create pattern to measure surprisingness of
	//
	// LambdaLink
	//   X Y Z W
	//   PresentLink
	//     List
	//       X
	//       Y
	//       X
	//     List
	//       Z
	//       W
	//       X
	Handle pattern = al(LAMBDA_LINK,
	                    al(VARIABLE_SET, X, Y, Z, W),
	                    al(PRESENT_LINK,
	                       al(LIST_LINK, X, Y, X),
	                       al(LIST_LINK, Z, W, X)));
	MinerUTestUtils::add_minsup_eval(_as, pattern, 5, TruthValue::TRUE_TV());

	// Test normalized I-Surprisingness
	std::string mode = "nisurp";
	double db_ratio = 0.5;
	HandleSeq surp_results = ure_surp(mode, 2, db_ratio);
	Handle expected = MinerUTestUtils::add_surp_eval(_as, mode, pattern);

	logger().debug() << "surp_results = " << oc_to_string(surp_results);

	TS_ASSERT(not surp_results.empty());

	Handle surp_front = surp_results.front();

	logger().debug() << "expected = " << oc_to_string(expected);
	logger().debug() << "surp_front = " << oc_to_string(surp_front);

	TS_ASSERT(content_eq(expected, surp_front));

	TS_ASSERT_DELTA(0.0, TruthValueCast(expected->getValue(truth_key()))->get_mean(), 0.3);
}

// Like test_nisurp_linkage_synthetic_3 but using bootstrapping to
// calculate empirical probability and estimates.
void SurprisingnessUTest::test_nisurp_emp_prob_bs_1()
{
	logger().info("BEGIN TEST: %s", __FUNCTION__);

	// Create data base
	populate_uniform_inheritance_links(1000, 0.01);

	// Create pattern to measure surprisingness of
	//
	// LambdaLink
	//   X Y Z
	//   PresentLink
	//     InheritanceLink
	//       X
	//       Y
	//     InheritanceLink
	//       Z
	//       Y
	Handle pattern = al(LAMBDA_LINK,
	                    al(VARIABLE_SET, X, Y, Z),
	                    al(PRESENT_LINK,
	                       al(INHERITANCE_LINK, X, Y),
	                       al(INHERITANCE_LINK, Z, Y)));
	MinerUTestUtils::add_minsup_eval(_as, pattern, 5, TruthValue::TRUE_TV());

	// Test normalized I-Surprisingness
	std::string mode = "nisurp";
	unsigned max_conjuncts = 2;
	double db_ratio = 2;
	HandleSeq surp_results = ure_surp(mode, max_conjuncts, db_ratio);
	Handle expected = MinerUTestUtils::add_surp_eval(_as, mode, pattern);

	logger().debug() << "surp_results = " << oc_to_string(surp_results);

	TS_ASSERT(not surp_results.empty());

	Handle surp_front = surp_results.front();

	logger().debug() << "expected = " << oc_to_string(expected);
	logger().debug() << "surp_front = " << oc_to_string(surp_front);

	TS_ASSERT(content_eq(expected, surp_front));

	TS_ASSERT_DELTA(0.0, TruthValueCast(expected->getValue(truth_key()))->get_mean(), 0.3);
}

// Test normalized I-Surprisingess for the ugly male soda drinker
void SurprisingnessUTest::test_nisurp_ugly_man_soda_drinker()
{
	logger().info("BEGIN TEST: %s", __FUNCTION__);

	// Define db
	load_ugly_male_soda_drinker_corpus();

	// Add
	//
	// Lambda
	//   X
	//   Present
	//     Inheritance
	//       X
	//       Concept "man"
	//     Inheritance
	//       X
	//       Concept "soda drinker"
	//     Inheritance
	//       X
	//       Concept "ugly"
	//
	// and its conjuncts.
	Handle ugly_pattern = MinerUTestUtils::add_ugly_pattern(_as),
		man_pattern = MinerUTestUtils::add_man_pattern(_as),
		soda_drinker_pattern = MinerUTestUtils::add_soda_drinker_pattern(_as),
		umsd_pattern = MinerUTestUtils::add_ugly_man_soda_drinker_pattern(_as);
	// Wrap pattern and its conjuncts in minsup predicates
	MinerUTestUtils::add_minsup_eval(_as, umsd_pattern, 5, TruthValue::TRUE_TV());

	// Add
	//
	// Another pattern involving a subtler linkage
	// LambdaLink
	//   X Y Z W
	//   PresentLink
	//     InheritanceLink
	//       X
	//       Y
	//     InheritanceLink
	//       Z
	//       Y
	//     InheritanceLink
	//       W
	//       Y
	Handle linkage_pattern = al(LAMBDA_LINK,
	                            al(VARIABLE_SET, X, Y, Z, W),
	                            al(PRESENT_LINK,
	                               al(INHERITANCE_LINK, X, Y),
	                               al(INHERITANCE_LINK, Z, Y),
	                               al(INHERITANCE_LINK, W, Y)));
	// Wrap pattern and its conjuncts in minsup predicates
	MinerUTestUtils::add_minsup_eval(_as, linkage_pattern, 5, TruthValue::TRUE_TV());

	// Test I-Surprisingness
	std::string mode("nisurp");
	unsigned max_conjuncts = 3;
	HandleSeq surp_results = ure_surp(mode, max_conjuncts);
	Handle expected = MinerUTestUtils::add_surp_eval(_as, mode, umsd_pattern);

	logger().debug() << "surp_results = " << oc_to_string(surp_results);

	TS_ASSERT(not surp_results.empty());

	Handle surp_front = surp_results.front();

	logger().debug() << "expected = " << oc_to_string(expected);
	logger().debug() << "surp_front = " << oc_to_string(surp_front);

	TS_ASSERT(content_eq(expected, surp_front));
	TS_ASSERT_DELTA(0.833, TruthValueCast(expected->getValue(truth_key()))->get_mean(), 1e-3);
}

// Like test_nisurp_no_linkage_synthetic_1 but using jsdsurp instead
// nisurp.
void SurprisingnessUTest::test_jsdsurp_no_linkage_synthetic()
{
	logger().info("BEGIN TEST: %s", __FUNCTION__);

	// Create data base
	populate_uniform_inheritance_links(1000, 0.01);

	// Create pattern to measure surprisingness of
	//
	// Lambda
	//   X Y Z W
	//   Present
	//     Inheritance X Y
	//     Inheritance Z W
	Handle pattern = al(LAMBDA_LINK,
	                    al(VARIABLE_SET, X, Y, Z, W),
	                    al(PRESENT_LINK,
	                       al(INHERITANCE_LINK, X, Y),
	                       al(INHERITANCE_LINK, Z, W)));
	MinerUTestUtils::add_minsup_eval(_as, pattern, 5, TruthValue::TRUE_TV());

	// Test normalized I-Surprisingness
	std::string mode = "jsdsurp";
	HandleSeq surp_results = ure_surp(mode, 2);
	Handle expected = MinerUTestUtils::add_surp_eval(_as, mode, pattern);

	logger().debug() << "surp_results = " << oc_to_string(surp_results);

	TS_ASSERT(not surp_results.empty());

	Handle surp_front = surp_results.front();

	logger().debug() << "expected = " << oc_to_string(expected);
	logger().debug() << "surp_front = " << oc_to_string(surp_front);

	TS_ASSERT(content_eq(expected, surp_front));

	// Since the pattern is composed of 2 independent patterns, it
	// should be completely unsurprising, thus have a nearly null
	// nisurp measure, however bootstrapping introduces inaccuracies
	// thus the last delta.
	TS_ASSERT_DELTA(0.0, TruthValueCast(expected->getValue(truth_key()))->get_mean(), 0.8);
}

// Test normalized I-Surprisingess for the ugly male soda drinker
void SurprisingnessUTest::test_jsdsurp_ugly_man_soda_drinker()
{
	logger().info("BEGIN TEST: %s", __FUNCTION__);

	// Define db
	load_ugly_male_soda_drinker_corpus();

	// Add
	//
	// Lambda
	//   X
	//   Present
	//     Inheritance
	//       X
	//       Concept "man"
	//     Inheritance
	//       X
	//       Concept "soda drinker"
	//     Inheritance
	//       X
	//       Concept "ugly"
	//
	// and its conjuncts.
	Handle ugly_pattern = MinerUTestUtils::add_ugly_pattern(_as),
		man_pattern = MinerUTestUtils::add_man_pattern(_as),
		soda_drinker_pattern = MinerUTestUtils::add_soda_drinker_pattern(_as),
		umsd_pattern = MinerUTestUtils::add_ugly_man_soda_drinker_pattern(_as);
	// Wrap pattern and its conjuncts in minsup predicates
	MinerUTestUtils::add_minsup_eval(_as, umsd_pattern, 5, TruthValue::TRUE_TV());

	// Add
	//
	// Another pattern involving a subtler linkage
	// LambdaLink
	//   X Y Z W
	//   PresentLink
	//     InheritanceLink
	//       X
	//       Y
	//     InheritanceLink
	//       Z
	//       Y
	//     InheritanceLink
	//       W
	//       Y
	Handle linkage_pattern = al(LAMBDA_LINK,
	                            al(VARIABLE_SET, X, Y, Z, W),
	                            al(PRESENT_LINK,
	                               al(INHERITANCE_LINK, X, Y),
	                               al(INHERITANCE_LINK, Z, Y),
	                               al(INHERITANCE_LINK, W, Y)));
	// Wrap pattern and its conjuncts in minsup predicates
	MinerUTestUtils::add_minsup_eval(_as, linkage_pattern, 5, TruthValue::TRUE_TV());

	// Test I-Surprisingness
	std::string mode("jsdsurp");
	unsigned max_conjuncts = 3;
	HandleSeq surp_results = ure_surp(mode, max_conjuncts);
	Handle expected = MinerUTestUtils::add_surp_eval(_as, mode, umsd_pattern);

	logger().debug() << "surp_results = " << oc_to_string(surp_results);

	TS_ASSERT(not surp_results.empty());

	Handle surp_front = surp_results.front();

	logger().debug() << "expected = " << oc_to_string(expected);
	logger().debug() << "surp_front = " << oc_to_string(surp_front);

	TS_ASSERT(content_eq(expected, surp_front));
	TS_ASSERT_DELTA(0.92, TruthValueCast(expected->getValue(truth_key()))->get_mean(), 1e-2);
}

#undef al
#undef an
